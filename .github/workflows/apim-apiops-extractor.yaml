name: APIM APIOPS Extractor
 
on:
  workflow_call:
    inputs:
      source-enviroment:
        type: string
        required: true
 
env:
  apiops_release_version: v6.0.0-alpha.1.0.9
 
jobs:
  extractor:
    runs-on: ubuntu-latest
    environment: ${{ inputs.source-enviroment }}
    outputs:
      branch:   ${{ steps.create-branch.outputs.branch }}
      datetemp: ${{ steps.timestamp.outputs.datetemp  }}
      get_latest_tag: ${{ steps.get_latest_tag.outputs.latest_tag }}
      build_number: ${{ steps.calc_build_number.outputs.build_number }}
      
    steps:
    - uses: actions/checkout@v4

    - name: Calculate next build number
      id: calc_build_number
      run: |
        if [[ "${{ steps.get_latest_tag.outputs.latest_tag }}" =~ ^RTS[0-9]+BN([0-9]+)$ ]]; then
            BUILD_NUMBER=$((BASH_REMATCH[1]+1))
        elif [[ "${{ steps.get_latest_tag.outputs.latest_tag }}" =~ ^RTS[0-9]+BN([0-9]+)$ ]]; then
          BUILD_NUMBER=$((BASH_REMATCH[1]+1))
        else
          BUILD_NUMBER=1
        fi
        echo "Next build number: $BUILD_NUMBER"
        echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
 
    - name: Create new branch
      id: create-branch
      run: |
        BRANCH_NAME="extracted-api/run-${{ github.run_number }}-${{ github.run_attempt }}"
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git checkout -b $BRANCH_NAME
        git push origin $BRANCH_NAME  
        echo "branch=$BRANCH_NAME" >> $GITHUB_OUTPUT   

    - name: Runs APIOPS Extractor
      env:
        AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        AZURE_RESOURCE_GROUP_NAME: ${{ secrets.AZURE_RESOURCE_GROUP_NAME }}
        API_MANAGEMENT_SERVICE_NAME: ${{ secrets.API_MANAGEMENT_SERVICE_NAME }}
        API_MANAGEMENT_SERVICE_OUTPUT_FOLDER_PATH: ${{ GITHUB.WORKSPACE }}/apimartifacts
        API_SPECIFICATION_FORMAT: "OpenAPIV3Yaml"
        CONFIGURATION_YAML_PATH:  ${{ GITHUB.WORKSPACE }}/configuration.extractor.yaml
      run: |
        Set-StrictMode -Version Latest
        $ErrorActionPreference = "Stop"
        $VerbosePreference = "Continue"
        $InformationPreference = "Continue"
 
        Write-Information "Setting name variables..."
        $releaseFileName = "extractor-linux-x64.zip"
        $executableFileName = "extractor"
 
        Write-Information "Downloading release..."
        $uri = "https://github.com/Azure/apiops/releases/download/${{ env.apiops_release_version }}/$releaseFileName"
        $downloadFilePath = Join-Path "${{ runner.temp }}" $releaseFileName
        Invoke-WebRequest -Uri "$uri" -OutFile "$downloadFilePath"
 
        Write-Information "Extracting release..."
        $executableFolderPath = Join-Path "${{ runner.temp }}" "extractor"
        Expand-Archive -Path "$downloadFilePath" -DestinationPath "$executableFolderPath"
        $executableFilePath = Join-Path "$executableFolderPath" $executableFileName
 
        Write-Information "Setting file permissions..."
        & chmod +x "$executableFilePath"
        if ($LASTEXITCODE -ne 0) { throw "Setting file permissions failed."}
 
        Write-Information "Running extractor..."
        & "$executableFilePath"
        if ($LASTEXITCODE -ne 0) { throw "Running extractor failed."}
 
        Write-Information "Execution complete."
      shell: pwsh

    - name: Get latest tag
      id: get_latest_tag
      run: |
        LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
        echo "Latest tag: $LATEST_TAG"
        echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT

    

    - name: Get the timestamp
      id: timestamp
      run: |
        TIMESTAMP=$(date +'%Y%m%d%H%M%S')
        echo "Timestamp: $TIMESTAMP"
        echo "datetemp=$TIMESTAMP" >> $GITHUB_OUTPUT

    - name: Create and push tag
      env:
        TIMESTAMP: ${{ steps.timestamp.outputs.datetemp }}
        BUILD_NUMBER: ${{ steps.calc_build_number.outputs.build_number }}
      run: |
        TAG="RTS${{env.TIMESTAMP}}BNBN${{env.BUILD_NUMBER}}"
        echo "Creating tag $TAG"
        git tag -a "$TAG" -m "Tag generated by GitHub Actions"
        git push origin "$TAG"

    - name: publish artifact
      uses: actions/upload-artifact@v4
      env:
        API_MANAGEMENT_SERVICE_OUTPUT_FOLDER_PATH: apimartifacts  # change this to the artifacts folder  
      with:
        name: artifacts-from-portal
        path: ${{ GITHUB.WORKSPACE }}/${{ env.API_MANAGEMENT_SERVICE_OUTPUT_FOLDER_PATH }}


    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'

    - name: Install dependencies
      run: npm install
      working-directory: ./.github/actions/create-pull-request

    - name: Run custom action to create PR
      uses: ./.github/actions/create-pull-request
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ steps.create-branch.outputs.branch }}
        base: 'main'
        commit_message: 'updated extract from apim instance apimartifacts'
        title: 'apimartifacts - extract'
        body: 'This PR is auto-generated by Github actions workflow.'