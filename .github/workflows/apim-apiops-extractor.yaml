name: APIM APIOPS Extractor
 
on:
  workflow_call:
    inputs:
      source-enviroment:
        type: string
        required: true
 
env:
  APIOPS_RELEASE_VERSION: v6.0.1 #v6.0.0-alpha.1.0.9
 
jobs:
  extractor:
    
    runs-on: ubuntu-latest
    environment: ${{ inputs.source-enviroment }}

    outputs:
      branch:   ${{ steps.create-branch.outputs.branch }}
      
    steps:
      
    - uses: actions/checkout@v4
 
    - name: Create new branch
      id: create-branch
      run: |
        BRANCH_NAME="extracted-api/run-${{ github.run_number }}-${{ github.run_attempt }}"
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git checkout -b $BRANCH_NAME
        git push origin $BRANCH_NAME  
        echo "branch=$BRANCH_NAME" >> $GITHUB_OUTPUT   

    - name: Runs APIOPS Extractor
      env:
        AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        AZURE_RESOURCE_GROUP_NAME: ${{ secrets.AZURE_RESOURCE_GROUP_NAME }}
        API_MANAGEMENT_SERVICE_NAME: ${{ secrets.API_MANAGEMENT_SERVICE_NAME }}
        API_MANAGEMENT_SERVICE_OUTPUT_FOLDER_PATH: ${{ GITHUB.WORKSPACE }}/apimartifacts
        API_SPECIFICATION_FORMAT: "OpenAPIV3Yaml"
        CONFIGURATION_YAML_PATH:  ${{ GITHUB.WORKSPACE }}/configuration.extractor.yaml
      run: |

          set -e
          set -o pipefail

          echo "Setting name variables..."
          releaseFileName="extractor-linux-x64.zip"
          executableFileName="extractor"

          echo "Downloading release..."
          uri="https://github.com/Azure/apiops/releases/download/${{ env.APIOPS_RELEASE_VERSION }}/$releaseFileName"
          downloadFilePath="${RUNNER_TEMP}/$releaseFileName"
          curl -L -o "$downloadFilePath" "$uri"

          echo "Extracting release..."
          executableFolderPath="${{runner.temp}}/extractor"
          mkdir -p "$executableFolderPath"
          unzip "$downloadFilePath" -d "$executableFolderPath"
          executableFilePath="$executableFolderPath/$executableFileName"

          echo "Setting file permissions..."
          chmod +x "$executableFilePath"

          echo "Running extractor..."
          "$executableFilePath"
          if [ $? -ne 0 ]; then
              echo "Running extractor failed." >&2
              exit 1
          else
              echo "Execution completed successfully."
          fi

    - name: publish artifact
      uses: actions/upload-artifact@v4
      env:
        API_MANAGEMENT_SERVICE_OUTPUT_FOLDER_PATH: apimartifacts
      with:
        name: artifacts-from-portal
        path: ${{ GITHUB.WORKSPACE }}/${{ env.API_MANAGEMENT_SERVICE_OUTPUT_FOLDER_PATH }}


    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'

    - name: Install dependencies
      run: npm install
      working-directory: ./.github/actions/create-pull-request

    - name: Run custom action to create PR
      uses: ./.github/actions/create-pull-request
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ steps.create-branch.outputs.branch }}
        base: 'main'
        commit_message: 'updated extract from apim instance apimartifacts'
        title: 'apimartifacts - extract'
        body: 'This PR is auto-generated by Github actions workflow.'
